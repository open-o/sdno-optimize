{"models": {"lsp": {"notes": null, "required": ["ingress_node_id", "egress_node_id", "ingress_node_name", "egress_node_name", "bandwidth", "hop_list"], "properties": {"hop_list": {"items": {"type": "String"}, "type": "array"}, "uid": {"default": null, "type": "string"}, "ingress_node_name": {"type": "string"}, "ingress_node_id": {"type": "string"}, "bandwidth": {"type": "string"}, "egress_node_name": {"type": "string"}, "path": {"default": null, "type": "string"}, "egress_node_id": {"type": "string"}}, "description": "LSP model", "id": "lsp"}}, "basePath": "http://10.9.63.140:34772", "swaggerVersion": "1.2", "apiVersion": "v1.0", "apis": [{"operations": [{"parameters": [{"name": "lsp_uid", "dataType": "string", "paramType": "path", "required": true, "description": ""}], "responseClass": "list of lsp", "notes": "DELETE lsp/uid", "responseMessages": [], "summary": "Delete an LSP", "httpMethod": "DELETE", "nickname": "delete_lsp"}, {"parameters": [{"name": "ingress_uid", "dataType": "string", "paramType": "path", "required": true, "description": ""}], "responseClass": "list of lsp Example:<br /> {\"lsps\": [{\"uid\": \"lsp_0\", \"ingress_node_name\": \n\"\", \"egress_node_name\": \"\", \"bandwidth\": 1000, \"ingress_node_uid\": \"100\", \n\"egress_node_uid\": \"102\", \"lsp_name\": \"vip_lsp1\", \"path\":[\"100\",\"101\", \n\"102\"] , \"user_data\":\"xxx\"}]} <br /> <br /> lsp_name: The name of an LSP \n<br /> ingress_node_name: name of the ingress node (Get from BRS).  <br /> \ningress_node_uid: unique id of ingress node.<br /> egress_node_name: name \nof the egress node <br /> egress_node_uid: unique id of egress node. <br />\nuid: unique id of the LSP <br /> path: A list of node uids that the LSP \ntraverses in sequence. <br /> user_data: opaque context data of the LSP. It\nwill be used at manipulation of the LSP. <br /> bandwidth: Configured LSP \ncapacity in Mbps", "notes": "GET lsp/uid or  GET lsp/", "responseMessages": [], "summary": "Get LSP information. If the ingress_node_uid presents, return the LSP <br/>starts from the desired node. otherwise, return all available LSPs", "httpMethod": "GET", "nickname": "get_lsp"}], "path": "/openoapi/sdno-mpls-optimizer/v1/lsp/{lsp_uid}", "description": null}, {"operations": [{"parameters": [], "responseClass": "list of lsp Example:<br /> {\"lsps\": [{\"uid\": \"lsp_0\", \"ingress_node_name\": \n\"\", \"egress_node_name\": \"\", \"bandwidth\": 1000, \"ingress_node_uid\": \"100\", \n\"egress_node_uid\": \"102\", \"lsp_name\": \"vip_lsp1\", \"path\":[\"100\",\"101\", \n\"102\"] , \"user_data\":\"xxx\"}]} <br /> <br /> lsp_name: The name of an LSP \n<br /> ingress_node_name: name of the ingress node (Get from BRS).  <br /> \ningress_node_uid: unique id of ingress node.<br /> egress_node_name: name \nof the egress node <br /> egress_node_uid: unique id of egress node. <br />\nuid: unique id of the LSP <br /> path: A list of node uids that the LSP \ntraverses in sequence. <br /> user_data: opaque context data of the LSP. It\nwill be used at manipulation of the LSP. <br /> bandwidth: Configured LSP \ncapacity in Mbps", "notes": "GET lsp/", "responseMessages": [], "summary": "Get LSP information.  return all available LSPs", "httpMethod": "GET", "nickname": "get_all_lsp"}, {"parameters": [{"name": "body", "dataType": "lsp", "paramType": "body", "description": "create an LSP"}], "responseClass": null, "notes": "POST lsp/ <br /> request body sample <br /> {\"hop_list\": [\"2\", \"6\"], <br/>\"ingress_node_uid\": \"2\", \"ingress_node_name\": \"\", \"lsp_name\": <br/>\"alu_2_6_lsp\", \"egress_node_uid\": \"6\", \"priority\": null, \"bandwidth\": <br/>100.0, \"delay\": null, \"egress_node_name\": \"\"}", "responseMessages": [{"message": "flow was created.", "code": "200"}, {"message": "invalid input", "code": "500"}], "summary": "Add a new LSP", "httpMethod": "POST", "nickname": "add_lsp"}, {"parameters": [{"name": "body", "dataType": "lsp", "paramType": "body", "description": "update an LSP"}], "responseClass": "{}", "notes": "PUT lsp/", "responseMessages": [], "summary": "Update LSP. Only LSP bandwidth is allowed to be updated in current version.", "httpMethod": "PUT", "nickname": "update_lsp"}], "path": "/openoapi/sdno-mpls-optimizer/v1/lsp", "description": null}, {"operations": [{"parameters": [{"name": "vsite_uid", "dataType": "string", "paramType": "path", "required": true, "description": ""}], "responseClass": "map of {vsite_uid:[lsp]}", "notes": "GET lsp/visite/{uid}", "responseMessages": [], "summary": "Get the LSPs of  the flow specs of vsite", "httpMethod": "GET", "nickname": "get_lsp_by_vsite"}], "path": "/openoapi/sdno-mpls-optimizer/v1/lsp/vsite/{vsite_uid}", "description": null}, {"operations": [{"parameters": [{"name": "lsp_uid", "dataType": "string", "paramType": "path", "required": true, "description": ""}], "responseClass": "map of {lsp_uid:[list of vsite]}", "notes": "GET /visite/lsp/{lsp_uids}", "responseMessages": [], "summary": "Get the vsite flow specs in the LSP.", "httpMethod": "GET", "nickname": "get_vsite_by_lsp"}], "path": "/openoapi/sdno-mpls-optimizer/v1/vsite/lsp/{lsp_uid}", "description": null}, {"operations": [{"parameters": [{"name": "lsp_uid", "dataType": "string", "paramType": "query", "required": true, "description": ""}, {"name": "vsite_uid", "dataType": "string", "paramType": "query", "required": true, "description": ""}], "responseClass": null, "notes": "DELETE flow-policy?lsp_uid=xxx&vsite_uid=yyy", "responseMessages": [{"message": "flow policy was deleted.", "code": "200"}, {"message": "invalid input", "code": "500"}], "summary": "Delete a flow policy.", "httpMethod": "DELETE", "nickname": "delete_flow_policy"}, {"parameters": [{"name": "body", "dataType": "Json", "paramType": "body", "description": "body"}], "responseClass": null, "notes": "POST flow-policy <br /> Request body sample <br /> {\"lsp_uid\": \"xxx\", <br/>\"vsite_uid\": \"yyy\"}", "responseMessages": [{"message": "flow policy was created.", "code": "200"}, {"message": "invalid input", "code": "500"}], "summary": "Create new flow policy to scheduling the flow spec of a vsite to a specific<br/>LSP.", "httpMethod": "POST", "nickname": "create_flow_policy"}], "path": "/openoapi/sdno-mpls-optimizer/v1/flow-policy", "description": null}]}